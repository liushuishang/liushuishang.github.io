<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云翔天下</title>
  
  <subtitle>总要留下一些存在的痕迹罢</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.geetry.com/"/>
  <updated>2018-01-14T07:19:50.588Z</updated>
  <id>http://www.geetry.com/</id>
  
  <author>
    <name>流水殇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>扩展hexo-qiniu-sync插件支持自动资源文件</title>
    <link href="http://www.geetry.com/2018/01/14/hexo-qiniu2/"/>
    <id>http://www.geetry.com/2018/01/14/hexo-qiniu2/</id>
    <published>2018-01-14T06:46:24.000Z</published>
    <updated>2018-01-14T07:19:50.588Z</updated>
    
    <content type="html"><![CDATA[<p>前面在搭建个人博客的时候使用了<code>hexo-qiniu-sync</code>来对接七牛存储，自动完成图片、css和js的上传以及标签解析。<br>但是我们写技术博客的时候经常会附加一些代码文件或者压缩包之类的，我就想能否扩展一下这个插件也让它能够自动帮我们完成上传和标签解析。</p><a id="more"></a><p>所以，我fork原作者的代码，并修改了源代码，放在<a href="https://github.com/liushuishang/hexo-qiniu-sync" target="_blank" rel="noopener">这里</a>，对原作者表示感谢。<br>我同时把修改后的插件上传到了npm，只要通过一下命令安装即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-qiniu-sync2 --save</span><br></pre></td></tr></table></figure></p><p>用法：<br>其他用法参考源插件，资源文件使用的地方插入<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnAsset test.txt title:'测试资源文件' alt:'测试文件' %&#125;</span><br></pre></td></tr></table></figure></p><p>生成的html代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"测试资源文件"</span> <span class="attr">alt</span>=<span class="string">"测试文件"</span> <span class="attr">href</span>=<span class="string">"http://p24hn6n30.bkt.clouddn.com/static/asset/test.txt"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"noopener"</span>&gt;</span>测试资源文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面在搭建个人博客的时候使用了&lt;code&gt;hexo-qiniu-sync&lt;/code&gt;来对接七牛存储，自动完成图片、css和js的上传以及标签解析。&lt;br&gt;但是我们写技术博客的时候经常会附加一些代码文件或者压缩包之类的，我就想能否扩展一下这个插件也让它能够自动帮我们完成上传和标签解析。&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://www.geetry.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="http://www.geetry.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+Mybatis实现事务内多数据源切换2</title>
    <link href="http://www.geetry.com/2018/01/13/SpringMybatisMutilDataSource2/"/>
    <id>http://www.geetry.com/2018/01/13/SpringMybatisMutilDataSource2/</id>
    <published>2018-01-13T14:21:52.000Z</published>
    <updated>2018-01-13T15:07:47.994Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.geetry.com/2018/01/13/SpringMybatisMutilDatasource">上一篇</a>我介绍了如何在SpringBoot+Mybatis中实现多数据源的动态切换。这一篇我将介绍为什么自动切换在事务笼罩下的Service方法内会失效，并说明其解决办法，好，让我们开始。</p><a id="more"></a><h1 id="问题缘由"><a href="#问题缘由" class="headerlink" title="问题缘由"></a>问题缘由</h1><p>首先让我们先配置一个事物管理器以及它的AOP拦截切面：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"create*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"modify*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"edit*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"remove*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"send*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"search*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"count*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"list*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"load*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--&lt;tx:method name="*" propagation="REQUIRED"   isolation="REPEATABLE_READ"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置拦截所有xxxService中的public方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(public * com.smartdata360..service.*Service.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span> <span class="attr">order</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当我们配置了事物管理器和拦截Service中的方法后，每次执行Service中方法前会开启一个事务，<br>并且同时会缓存一些东西：DataSource、SqlSessionFactory、Connection等<br><img title="事务处理" alt="事务处理" src="http://p24hn6n30.bkt.clouddn.com/static/images/sbmm005.png-blogImg"><br><img title="事务处理" alt="事务处理" src="http://p24hn6n30.bkt.clouddn.com/static/images/sbmm006.png-blogImg"> </p><p>所以，我们在外面再怎么设置要求切换数据源也没用，因为Conneciton都是从缓存中拿的，所以我们要想能够顺利的切换数据源，实际就是能够动态的根据DatabaseType获取不同的Connection，并且要求不能影响整个事物的特性。</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>我们既想实现动态的获取不同的Connection对象，又不想破坏事务的特性，那怎么办？我想到的办法就是重写事物管理器。SpringBoot中默认用到的是SpringManagedTransactionFactory这个工厂类来创建事务对象SpringManagedTransaction<br><img title="事务处理" alt="事务处理" src="http://p24hn6n30.bkt.clouddn.com/static/images/sbmm007.png-blogImg"><br>而事务对象有我要的方法<br><img title="事务处理" alt="事务处理" src="http://p24hn6n30.bkt.clouddn.com/static/images/sbmm008.png-blogImg"><br>所以我决定改写这两个类，首先是重写一个Transaction类的实现，它封装了怎么获取Connection对象。<br><img title="事务处理" alt="事务处理" src="http://p24hn6n30.bkt.clouddn.com/static/images/sbmm009.png-blogImg"> </p><ol><li>dataSource保持了当前的数据源对象，实际就是DynamicDataSource  </li><li>mainConnecition表示当前事务对应的Connection</li><li>mainDatabaseIdentification表示当前事务对应的数据源标识</li><li>otherConnectionMap表示Service中用到的其他的数据源Connection对象</li></ol><p>首先看我们如何获取一个Conneciton对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DatabaseType databaseType = DatabaseContextHolder.getDatabaseType();</span><br><span class="line"><span class="comment">//        notNull(databaseType, "DatabaseType can not be null");</span></span><br><span class="line">        <span class="keyword">if</span> (databaseType == <span class="keyword">null</span>) databaseType = DatabaseType.getDefault();</span><br><span class="line">        String databaseIdentification = databaseType.getValue();</span><br><span class="line">        <span class="keyword">if</span> (databaseIdentification.equals(mainDatabaseIdentification)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mainConnection != <span class="keyword">null</span>) <span class="keyword">return</span> mainConnection;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                openMainConnection();</span><br><span class="line">                mainDatabaseIdentification =databaseIdentification;</span><br><span class="line">                <span class="keyword">return</span> mainConnection;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取其他的数据源连接</span></span><br><span class="line">            <span class="keyword">if</span> (!otherConnectionMap.containsKey(databaseIdentification)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Connection conn = dataSource.getConnection();</span><br><span class="line">                    otherConnectionMap.put(databaseIdentification, conn);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> CannotGetJdbcConnectionException(<span class="string">"Could not get JDBC Connection"</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> otherConnectionMap.get(databaseIdentification);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openMainConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mainConnection = DataSourceUtils.getConnection(<span class="keyword">this</span>.dataSource);</span><br><span class="line">        <span class="keyword">this</span>.autoCommit = <span class="keyword">this</span>.mainConnection.getAutoCommit();</span><br><span class="line">        <span class="keyword">this</span>.isConnectionTransactional = DataSourceUtils.isConnectionTransactional(<span class="keyword">this</span>.mainConnection, <span class="keyword">this</span>.dataSource);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">            LOGGER.debug(</span><br><span class="line">                    <span class="string">"JDBC Connection ["</span></span><br><span class="line">                            + <span class="keyword">this</span>.mainConnection</span><br><span class="line">                            + <span class="string">"] will"</span></span><br><span class="line">                            + (<span class="keyword">this</span>.isConnectionTransactional ? <span class="string">" "</span> : <span class="string">" not "</span>)</span><br><span class="line">                            + <span class="string">"be managed by Spring"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>首先从当前线程变量中获取DatabaseType，然后取到当前的数据源标识，如果是mainDatabaseIdentification那么就从事务中获取事务自己管理的Connection；否则使用dataSource获取一个并且缓存起来（这时候会触发determineCurrentLookupKey方法的执行），避免重复获取。这样我们在外面设置的DatabaseType已经渗透到事物管理器内部了，也实现了Connection对象的动态获取。<br>但是我们不能改变事务处理的特性，所以其他的副Connection的状态应该与mainConnection保持一致，同样我改写了其他几个方法：<br><img title="事务处理" alt="事务处理" src="http://p24hn6n30.bkt.clouddn.com/static/images/sbmm010.png-blogImg"> </p><p>这样所有的Connection的状态与当前事务是一致的了。之前想过atomikos来实现分布式事务；我不确定我这种方法能否做到同一个事务在多个数据库上的一致性和隔离性。<br>好，核心的东西介绍完成了，那么我们怎么和Mybaits结合呢？很简单，我们也实现一个工厂类创建我们自己的事务处理对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支持Service内多数据源切换的Factory</span></span><br><span class="line"><span class="comment"> * Created by  yuananyun on 2017/7/19.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDataSouceTransactionFactory</span> <span class="keyword">extends</span> <span class="title">SpringManagedTransactionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> level</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> autoCommit</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transaction <span class="title">newTransaction</span><span class="params">(DataSource dataSource, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MultiDataSourceTransaction(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把这个工厂类挂到Mybatis的配置方法里面去：<br><img title="事务处理" alt="事务处理" src="http://p24hn6n30.bkt.clouddn.com/static/images/sbmm011.png-blogImg"> </p><p>如此，大功告成，附带<code>MultiDataSourceTransaction</code>类的源码<br><a href="http://p24hn6n30.bkt.clouddn.com/static/java/sbmm2MultiDataSourceTransaction.java" target="_blank" rel="noopener">MultiDataSourceTransaction</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.geetry.com/2018/01/13/SpringMybatisMutilDatasource&quot;&gt;上一篇&lt;/a&gt;我介绍了如何在SpringBoot+Mybatis中实现多数据源的动态切换。这一篇我将介绍为什么自动切换在事务笼罩下的Service方法内会失效，并说明其解决办法，好，让我们开始。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.geetry.com/categories/java/"/>
    
    
      <category term="SpringBoot,Mybatis,多数据源切换" scheme="http://www.geetry.com/tags/SpringBoot-Mybatis-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+Mybatis实现事务内多数据源切换1</title>
    <link href="http://www.geetry.com/2018/01/13/SpringMybatisMutilDatasource/"/>
    <id>http://www.geetry.com/2018/01/13/SpringMybatisMutilDatasource/</id>
    <published>2018-01-13T03:41:01.000Z</published>
    <updated>2018-01-13T15:07:47.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>目前SpringBoot+Mybatis使用人的还比较多，我们项目有需求在一个项目中使用多个数据源，所以我就借助于Spring提供的AbstractRoutingDataSource类实现了多数据源的切换。一切都很好，直到遇到了事务处理内的数据源切换，因为一个事务处理开始的时候就会把DataSource、Connection给缓存了，所以不管你在外面怎么配置切换，都不能实现connection的切换。经过查看和调试源代码，总算是找到了一条解决的路，现在写出来供需要的朋友做参考。<br>我的计划是写两篇文章来说明这个事情，第一篇主要是介绍如何实现项目中多数据源的切换；第二篇主要是介绍如何解决事务中数据源的动态切换。  </p><a id="more"></a><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>我们首先来看看动态数据源动态切换的原理:<br><img title="多数据源动态切换原理图" alt="多数据源动态切换原理图" src="http://p24hn6n30.bkt.clouddn.com/static/images/sbmm001.png-blogImg"><br>如上图所示，我们使用一个DynamicDataSource这个数据源来代理多个数据源，让上层感知不到后面的多个数据源，然后我们在线程上下文中根据需要来动态切换使用真正的数据源，那么就可以用常规的方法解决了多数据源的读取了。<br>感谢Spring为我们提供了这么一个代理数据源类：AbstractRoutingDataSource。该类有个方法用于在每次连接数据库的时候获取目标数据源:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> DataSource <span class="title">determineTargetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Assert.notNull(<span class="keyword">this</span>.resolvedDataSources, <span class="string">"DataSource router not initialized"</span>);</span><br><span class="line">Object lookupKey = determineCurrentLookupKey();</span><br><span class="line">DataSource dataSource = <span class="keyword">this</span>.resolvedDataSources.get(lookupKey);</span><br><span class="line"><span class="keyword">if</span> (dataSource == <span class="keyword">null</span> &amp;&amp; (<span class="keyword">this</span>.lenientFallback || lookupKey == <span class="keyword">null</span>)) &#123;</span><br><span class="line">dataSource = <span class="keyword">this</span>.resolvedDefaultDataSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot determine target DataSource for lookup key ["</span> + lookupKey + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们可以实现determineCurrentLookupKey这个方法来注入我们的数据源选择逻辑，比如我的一个实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DatabaseType type = DatabaseContextHolder.getDatabaseType();</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="keyword">null</span>) type = DatabaseType.getDefault();</span><br><span class="line">    <span class="keyword">return</span> type.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DatabaseType是一个自定义的Enum对象，只是为了区分不同的数据源而已。DatabaseContextHolder也是一个自定义类，目的是保持每个线程的各自的独立变量，你可能猜到了与ThreadLocal有关。<br><img title="DatabaseType" alt="DatabaseType" src="http://p24hn6n30.bkt.clouddn.com/static/images/sbmm002.png-blogImg"><br><img title="DatabaseContextHolder" alt="DatabaseContextHolder" src="http://p24hn6n30.bkt.clouddn.com/static/images/sbmm003.png-blogImg"></p><p>使用的时候在项目中配置多个数据源：<br><img title="配置多个数据源" alt="配置多个数据源" src="http://p24hn6n30.bkt.clouddn.com/static/images/sbmm004.png-blogImg"></p><p>我这里配置了两个数据源，对应到第一张图，很明显了吧。<br>好，工具都准备好了，现在看我们怎么用。首先我们肯定是在获取数据源的Connection之前设置好使用的DatabaseType，并且这个变量是与当前线程绑定的；然后DynamicDataSource在获取Conneciton的时候会通过方法determineCurrentLookupKey来获取一个真正的DataSource来开启一个Conneciton；接下来就是交给Mybaitis来完成数据库操作了。那么我们在哪里设置这个DatabaseType呢？每次需要切换前？这肯定没错，但是手工操作也太low了，所以我这里写了一个AOP方法来自动设置这个标识：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.smartdata360..mapper.*Mapper.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">datasourcePoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"datasourcePoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">handler</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Signature signature = point.getSignature();</span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) signature;</span><br><span class="line">        Method method = methodSignature.getMethod();</span><br><span class="line"></span><br><span class="line">        MultiDataSource multiDataSource = method.getAnnotation(MultiDataSource.class);</span><br><span class="line">        <span class="keyword">if</span> (multiDataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = method.getDeclaringClass();</span><br><span class="line">            multiDataSource = clazz.getAnnotation(MultiDataSource.class);</span><br><span class="line">        &#125;</span><br><span class="line">        DatabaseType databaseType = DatabaseType.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (multiDataSource != <span class="keyword">null</span>)</span><br><span class="line">            databaseType = multiDataSource.value();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DatabaseContextHolder.setDatabaseType(databaseType);</span><br><span class="line">            Object result = point.proceed();</span><br><span class="line">            DatabaseContextHolder.clearDatabaseType();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DatabaseContextHolder.clearDatabaseType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我指定我拦截所有Mapper类的所有方法，也就是我们的数据源切换是Mapper级别的；然后我从类或方法签名上查找MultiDataSource这个标注，如果有，那么直接取出设置的值，如果没有，那么直接设置primary为默认数据源；最后一步就是执行完后要清理一下这个标识，免得给下一次执行造成影响。这样我们就可以用给类或方法打标注的方式来决定我们使用哪个数据源了，如果没指定那么直接默认用primary数据源：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MultiDataSource</span>(DatabaseType.second)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NativeMapper</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select address from dim_card_native where id=#&#123;idcard&#125; limit 1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectOne</span><span class="params">(@Param(<span class="string">"idcard"</span>)</span> String idcard)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *插入缺失的身份证籍贯</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idCard</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into dim_card_native(id,address) select #&#123;idcard&#125;,' ' "</span> +</span><br><span class="line">            <span class="string">" where not exists(select id from dim_card_native where id=#&#123;idcard&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insetBlankCard</span><span class="params">(@Param(<span class="string">"idcard"</span>)</span> String idCard)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一切就是这么简单得实现了多数据源的自动切换，但是当我们在Service上开启事务的时候就会出问题了：切换数据源失效！原因和如何解决请看下一篇的讲解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;目前SpringBoot+Mybatis使用人的还比较多，我们项目有需求在一个项目中使用多个数据源，所以我就借助于Spring提供的AbstractRoutingDataSource类实现了多数据源的切换。一切都很好，直到遇到了事务处理内的数据源切换，因为一个事务处理开始的时候就会把DataSource、Connection给缓存了，所以不管你在外面怎么配置切换，都不能实现connection的切换。经过查看和调试源代码，总算是找到了一条解决的路，现在写出来供需要的朋友做参考。&lt;br&gt;我的计划是写两篇文章来说明这个事情，第一篇主要是介绍如何实现项目中多数据源的切换；第二篇主要是介绍如何解决事务中数据源的动态切换。  &lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.geetry.com/categories/java/"/>
    
    
      <category term="SpringBoot,Mybatis,多数据源切换" scheme="http://www.geetry.com/tags/SpringBoot-Mybatis-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>hexo集成hexo-qiniu-sync插件</title>
    <link href="http://www.geetry.com/2018/01/06/hexo-qiniu/"/>
    <id>http://www.geetry.com/2018/01/06/hexo-qiniu/</id>
    <published>2018-01-06T11:46:24.000Z</published>
    <updated>2018-01-13T15:09:54.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>  今天抽空在博客中集成hexo-qiniu-sync插件，主要目的是想把博客中用到的资源，比如图片、文件等放到七牛云存储，这样博客中只要通过url引用资源就行了，不仅方便而且安全。</p><blockquote><p>hexo-qiniu-sync是一个hexo插件， 可以让你在文档中入嵌存储在七牛上的图片、JS、CSS类型的静态文件。你可以不用手动上传文件到七牛，插件会自动帮你将本地目录的文件同步到七牛。</p></blockquote><p>  <a href="http://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">项目地址</a></p>  <a id="more"></a><p>  环境要求：</p><ol><li>已经安装好了nodejs和npm</li><li>已经初始化一个hexo博客目录</li><li><p>已经安装了git，并且关联到了github  </p><p>所有的以上要求可以<a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">参考这里</a>来完成。<br>在hexo初始化后的博客根目录执行如下语句来安装插件：</p><blockquote><p>npm install hexo-qiniu-sync –save</p></blockquote></li></ol><h1 id="开通七牛存储"><a href="#开通七牛存储" class="headerlink" title="开通七牛存储"></a>开通七牛存储</h1><p>  可以点击<a href="https://portal.qiniu.com/signup?code=3ll7lbuke1iky" target="_blank" rel="noopener">这里</a>来注册七牛存储，免费个人有10G的存储空间，个人博客应该足够使用了。<br>  注册成功后，进入”资源主页”添加一个”对象存储”来存放我们的博客资源。<br>  <img title="添加对象存储" alt="添加对象存储" src="http://p24hn6n30.bkt.clouddn.com/static/images/qiniu001.png-blogImg"><br>  存储空间名称写”yayblog”,选择华南地区、公开空间创建一个对象存储。点击刚创建的存储空间查看空间信息：<br>  <img title="对象存储详情" alt="对象存储详情" src="http://p24hn6n30.bkt.clouddn.com/static/images/qiniu002.png-blogImg"><br>  其中”内容管理”可以管理存储空间中的内容；”图片样式”可以为上传的图片做一些处理，比如剪裁、压缩、加水印等；七牛还给了一个测试域名，你也可以绑定自己的域名，但是需要中国特色的  “备案”，我使用的国外的域名，所以这里用得是这个测试域名。<br>  在”个人中心”可以查看刚自己的AccessKey/SecretKey，这个是七牛颁发的凭证，稍后配置的时候会使用。<br>  <img title="密钥查看" alt="密钥查看" src="http://p24hn6n30.bkt.clouddn.com/static/images/qiniu003.png-blogImg"><br>  至此，七牛存储已经准备就绪，我们重新回到我们的博客目录。  </p><h1 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h1><p>  打开根目录的<code>_config.yml</code>,添加如下配置：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#plugins:</span><br><span class="line">#- hexo-qiniu-sync</span><br><span class="line"></span><br><span class="line">#七牛云存储设置</span><br><span class="line">##offline       是否离线. 离线状态将使用本地地址渲染</span><br><span class="line">##sync          是否同步</span><br><span class="line">##bucket        空间名称.</span><br><span class="line">##access_key    上传密钥AccessKey</span><br><span class="line">##secret_key    上传密钥SecretKey</span><br><span class="line">##secret_file   秘钥文件路径，可以将上述两个属性配置到文件内，防止泄露，json格式。绝对路径相对路径均可</span><br><span class="line">##dirPrefix     上传的资源子目录前缀.如设置，需与urlPrefix同步</span><br><span class="line">##urlPrefix     外链前缀.</span><br><span class="line">##up_host      上传服务器路径,如选择华北区域的话配置为http://up-z1.qiniu.com</span><br><span class="line">##local_dir     本地目录.</span><br><span class="line">##update_exist  是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传)</span><br><span class="line">##image/js/css  子参数folder为不同静态资源种类的目录名称，一般不需要改动</span><br><span class="line">##image.extend  这是个特殊参数，用于生成缩略图或加水印等操作。具体请参考http://developer.qiniu.com/docs/v6/api/reference/fop/image/</span><br><span class="line">##              可使用基本图片处理、高级图片处理、图片水印处理这3个接口。例如 ?imageView2/2/w/500 即生成宽度最多500px的缩略图</span><br><span class="line">qiniu:</span><br><span class="line">  offline: false</span><br><span class="line">  sync: true</span><br><span class="line">  bucket: yayblog</span><br><span class="line">  secret_file: null</span><br><span class="line">  access_key: 七牛给的密钥</span><br><span class="line">  secret_key: 七牛给的密钥</span><br><span class="line">  dirPrefix: static</span><br><span class="line">  urlPrefix: http://前面七牛给的测试域名/static</span><br><span class="line">  up_host: http://upload.qiniu.com</span><br><span class="line">  local_dir: static</span><br><span class="line">  update_exist: true</span><br><span class="line">  image:</span><br><span class="line">    folder: images</span><br><span class="line">    extend: </span><br><span class="line">  js:</span><br><span class="line">    folder: js</span><br><span class="line">  css:</span><br><span class="line">    folder: css</span><br></pre></td></tr></table></figure></p><p>  这里要注意的是，参考作者的文档，会报错，正常的是不需要在这里写插件注册，也就是注释以下语句：</p><blockquote><p>#plugins:<br> #- hexo-qiniu-sync </p></blockquote><p>  这个插件的原理就是指定一个本地的目录<code>local_dir</code>和七牛对象存储的一个目录做映射，当发现本地目录中文件有变化的时候就自动上传到配置好的七牛的对象存储空间。<br>  根据作者的说法，这个本地<code>local_dir</code>是会自动创建的，但是不知道他有没有测试macos系统的情况。经过测试会出现权限不足的情况，所以需要执行命令把整个文件夹授权给当前用户，比如简单粗暴：</p><blockquote><p>chmod a+rwx .</p></blockquote><p>  万一真的不行，我还可以手动创建，但是需要注意新建的<code>static</code>文件夹的位置要和<code>source</code>平级，而不是<code>source</code>里面：<br>  <img title="static目录" alt="static目录" src="http://p24hn6n30.bkt.clouddn.com/static/images/qiniu004.png-blogImg"><br>  通过以上配置后，我们在static/images里面添加一张图片，然后执行命令：  </p><blockquote><p>hexo qiniu sync</p></blockquote><p>  就会在七牛网站对应的对象存储内容里面看到上传的图片啦<br>  <img title="上传的图片" alt="上传的图片" src="http://p24hn6n30.bkt.clouddn.com/static/images/qiniu005.png-blogImg"><br>  至此，我们已经完成了这个插件的配置，在markdown中使用图片：  </p><blockquote>  <img title="上传的图片" alt="上传的图片" src="http://p24hn6n30.bkt.clouddn.com/static/images/qiniu005.png-blogImg">  </blockquote><h1 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h1><p>  还记得我们前面的配置项里面有个<code>image : extend</code>的参数吗，这个是给图片处理预留的，也就是七牛可以自动对上传的图片做处理。  </p><blockquote><p>可以使用 基本图片处理（imageView2）、高级图片处理（imageMogr2）、图片水印处理（watermark） 这三个图片处理接口，多个接口内容之间用 | 间隔。<br>例如 ?imageView2/2/w/500 即生成宽度最多500px的缩略图。</p></blockquote><p>  以图片水印为例，我需要在我博客里面的图片上加上站点url的水印。首先我们在七牛的对象存储配置一个图片样式<code>blogImg</code>：<br>  <img title="新建图片样式" alt="新建图片样式" src="http://p24hn6n30.bkt.clouddn.com/static/images/qiniu006.png-blogImg"><br>  <img title="新建图片样式" alt="新建图片样式" src="http://p24hn6n30.bkt.clouddn.com/static/images/qiniu007.png-blogImg"><br>  完成后，回到博客根目录的配置文件修改配置项：  </p><blockquote><p>extend: -blogImg</p></blockquote><p>  这样当我们下载或引用图片的时候会自动加上了设置的水印。这是一个全局的配置，可能我们不是所有的图片都需要水印，这种情况我们可以在七牛创建多个图片样式，然后再引用图片的时候指定<code>extend</code>来指定生效的图片样式，标签中的设置会覆盖全局的设置，如：<br>  <img title="水印样式" alt="水印样式" src="http://p24hn6n30.bkt.clouddn.com/static/images/qiniu008.png">  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;  今天抽空在博客中集成hexo-qiniu-sync插件，主要目的是想把博客中用到的资源，比如图片、文件等放到七牛云存储，这样博客中只要通过url引用资源就行了，不仅方便而且安全。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo-qiniu-sync是一个hexo插件， 可以让你在文档中入嵌存储在七牛上的图片、JS、CSS类型的静态文件。你可以不用手动上传文件到七牛，插件会自动帮你将本地目录的文件同步到七牛。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;a href=&quot;http://github.com/gyk001/hexo-qiniu-sync&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://www.geetry.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="http://www.geetry.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>开通个人博客</title>
    <link href="http://www.geetry.com/2018/01/06/first/"/>
    <id>http://www.geetry.com/2018/01/06/first/</id>
    <published>2018-01-06T09:33:28.000Z</published>
    <updated>2018-01-06T11:50:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;一直断断续续在<a href="http://www.cnblogs.com/yuananyun" target="_blank" rel="noopener">博客园</a>写了将近七年的博客，期间也换了几次电脑了，所发的博文的原文也都丢了，此外，第三方博客平台终究不是那么自由，个人站点更适合作为个人名片。<br>&nbsp;&nbsp;&nbsp;&nbsp;后来github出现了，有想法把博文建立一个repository，这样不仅可以永久保留原文，而且还可以跟踪不同的版本，方便修改和完善。<br>&nbsp;&nbsp;&nbsp;&nbsp;再后来出现了hexo这个非常good的项目，可以直接把博文编译成静态html，然后很方便的部署到网页服务器（比如github的pages、nginx等）。<br>&nbsp;&nbsp;&nbsp;&nbsp;今天，作为程序员使用最多的编辑器肯定是Eclipse和IDEA之类的代码编辑器，然后我又有了用IDEA写博客的想法。写代码的时候突然有了灵感想写一篇博客，然后直接在IDEA里面new一个文件，拍拍拍，一气呵成，一键更新，快哉！<br>&nbsp;&nbsp;&nbsp;&nbsp;2018年来临了，今年给自己的规划是：多读书，多写博客，早睡早起身体好。所以花了几天搭建了这个博客站点，作为一个新的开始罢。我是一只奋斗中的眼镜兔，请记住我的头像：<br><img title="我的头像" alt="奋斗的眼镜兔" src="http://p24hn6n30.bkt.clouddn.com/static/images/头像.jpeg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一直断断续续在&lt;a href=&quot;http://www.cnblogs.com/yuananyun&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客园&lt;/a&gt;写了将近七年的博客，期间也换了几次电脑了，所发的博
      
    
    </summary>
    
      <category term="人生感悟" scheme="http://www.geetry.com/categories/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="碎碎念" scheme="http://www.geetry.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
</feed>
